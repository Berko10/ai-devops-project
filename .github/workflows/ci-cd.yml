name: Terraform CI/CD

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set AWS Region Defaults
        run: |
          if [ -z "${{ secrets.AWS_REGION }}" ]; then
            echo "AWS_REGION=us-east-1" >> $GITHUB_ENV
            echo "AWS_DEFAULT_REGION=us-east-1" >> $GITHUB_ENV
          else
            echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
            echo "AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.6.6'

      # ------------------------
      # 🔹 BACKEND APPLY
      # ------------------------
      - name: Terraform Init & Apply (Backend)
        working-directory: terraform/backend
        run: |
          terraform init
          terraform apply -auto-approve

      - name: Extract Backend Outputs
        working-directory: terraform/backend
        run: |
          echo "TF_BUCKET_NAME=$(terraform output -raw tf_state_bucket_name)" >> $GITHUB_ENV
          echo "DYNAMO_TABLE_NAME=$(terraform output -raw dynamo_table_name)" >> $GITHUB_ENV

      # ------------------------
      # 🔹 INIT MAIN BACKEND
      # ------------------------
      - name: Terraform Init (Main)
        working-directory: terraform/main
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ env.TF_BUCKET_NAME }}" \
            -backend-config="key=main/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.DYNAMO_TABLE_NAME }}"
      
      # ------------------------
      # 🔥 DESTROY משאבים קיימים
      # ------------------------
      - name: Terraform Destroy Existing Infra
        working-directory: terraform/main
        run: |
          terraform plan -destroy -out=tfdestroy.plan
          if grep -q 'No changes. Your infrastructure matches the configuration.' tfdestroy.plan; then
            echo "No resources to destroy."
          else
            terraform destroy -auto-approve
          fi
      # ------------------------
      # 🔹 APPLY ECR בלבד
      # ------------------------
      - name: Terraform Apply (ECR Only)
        working-directory: terraform/main
        run: |
          terraform apply -target=aws_ecr_repository.app_repo -auto-approve

      - name: Extract ECR Repo Name
        working-directory: terraform/main
        run: |
          echo "ECR_REPO_NAME=$(terraform output -raw ecr_repo_name)" >> $GITHUB_ENV

      # ------------------------
      # 🔹 DOCKER BUILD + PUSH
      # ------------------------
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:latest
          docker build -t $IMAGE_URI ./app
          docker push $IMAGE_URI

      # ------------------------
      # 🔹 APPLY כל שאר התשתית (ECS וכו')
      # ------------------------
      - name: Terraform Apply (All Infra)
        working-directory: terraform/main
        run: terraform apply -auto-approve

      # ------------------------
      # 🔹 בדיקות יוניט
      # ------------------------
      - name: Run Unit Tests
        working-directory: ./app
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          PYTHONPATH=. pytest tests
