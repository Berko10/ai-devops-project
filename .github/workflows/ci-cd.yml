name: Terraform CI/CD

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set AWS Region Defaults
        run: |
          if [ -z "${{ secrets.AWS_REGION }}" ]; then
            echo "AWS_REGION=us-east-1" >> $GITHUB_ENV
            echo "AWS_DEFAULT_REGION=us-east-1" >> $GITHUB_ENV
          else
            echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
            echo "AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.6.6'

      # ------------------------
      # 🔹 INIT INFRA
      # ------------------------
      - name: Terraform Init
        working-directory: terraform/main
        run: |
          terraform init
      
      - name: Destroy Conflicting Resources
        working-directory: terraform/main
        run: terraform destroy -auto-approve || true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"

      # ------------------------
      # 🔹 BACKEND APPLY
      # ------------------------
      - name: Terraform Apply (Backend)
        working-directory: terraform/backend
        run: |
          terraform init
          terraform plan -out=tfplan
          terraform apply -auto-approve -input=false || {
            ERR=$?
            echo "Terraform apply failed with exit code $ERR"
            LOG=$(terraform apply -auto-approve -input=false 2>&1 || true)
            if echo "$LOG" | grep -q "already exists"; then
              echo "⚠️ Resource already exists. Continuing..."
            else
              echo "$LOG"
              echo "❌ Unhandled error in backend apply. Exiting."
              exit $ERR
            fi
          }

      - name: Extract Backend Outputs
        working-directory: terraform/backend
        run: |
          echo "🔍 Extracting Terraform outputs..."

          # חילוץ TF_BUCKET_NAME
          TF_BUCKET_NAME_RAW=$(terraform output -raw tf_state_bucket_name)
          TF_BUCKET_NAME=$(echo "$TF_BUCKET_NAME_RAW" | sed 's/\[command\].*output -raw tf_state_bucket_name//' | sed 's/::.*//' | tr -d '\r\n')

          # חילוץ DYNAMO_TABLE_NAME
          DYNAMO_TABLE_NAME_RAW=$(terraform output -raw dynamo_table_name)
          DYNAMO_TABLE_NAME=$(echo "$DYNAMO_TABLE_NAME_RAW" | sed 's/\[command\].*output -raw dynamo_table_name//' | sed 's/::.*//' | tr -d '\r\n')

          echo "✅ Outputs extracted:"
          echo "TF_BUCKET_NAME=$TF_BUCKET_NAME"
          echo "DYNAMO_TABLE_NAME=$DYNAMO_TABLE_NAME"

          if [ -z "$TF_BUCKET_NAME" ] || [ -z "$DYNAMO_TABLE_NAME" ]; then
            echo "❌ ERROR - One or more outputs are empty!"
            exit 1
          fi

          echo "TF_BUCKET_NAME=$TF_BUCKET_NAME" >> $GITHUB_ENV
          echo "DYNAMO_TABLE_NAME=$DYNAMO_TABLE_NAME" >> $GITHUB_ENV

      # ------------------------
      # 🔹 INIT MAIN BACKEND
      # ------------------------
      - name: Terraform Init (Main)
        working-directory: terraform/main
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ env.TF_BUCKET_NAME }}" \
            -backend-config="key=main/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.DYNAMO_TABLE_NAME }}"
      
      # ------------------------
      # 🔥 DESTROY משאבים קיימים
      # ------------------------
      - name: Terraform Destroy Existing Infra
        working-directory: terraform/main
        run: |
          terraform plan -destroy -out=tfdestroy.plan
          if grep -q 'No changes. Your infrastructure matches the configuration.' tfdestroy.plan; then
            echo "No resources to destroy."
          else
            terraform destroy -auto-approve
          fi
      # ------------------------
      # 🔹 APPLY ECR בלבד
      # ------------------------
      - name: Terraform Apply (ECR Only if not exists)
        working-directory: terraform/main
        run: |
          if aws ecr describe-repositories --repository-names devops-app >/dev/null 2>&1; then
            echo "ECR repository already exists. Skipping terraform apply."
          else
            terraform apply -target=aws_ecr_repository.app_repo -auto-approve
          fi

      - name: Extract ECR Repo Name
        working-directory: terraform/main
        run: |
          ECR_REPO_NAME_RAW=$(terraform output -raw ecr_repo_name)
          ECR_REPO_NAME=$(echo "$ECR_REPO_NAME_RAW" | sed 's/\[command\].*output -raw ecr_repo_name//' | sed 's/::.*//' | tr -d '\r\n')
          echo ECR_REPO_NAME=$ECR_REPO_NAME
          if [ -n "$ECR_REPO_NAME" ]; then
            echo "ECR_REPO_NAME=$ECR_REPO_NAME" >> $GITHUB_ENV
          else
            echo "❌ ECR_REPO_NAME is empty!" && exit 1
          fi

      # ------------------------
      # 🔹 DOCKER BUILD + PUSH
      # ------------------------
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:latest
          echo "Build Docker Image: $IMAGE_URI"
          docker build -t $IMAGE_URI ./app
          echo "Push Docker Image: $IMAGE_URI"
          docker push $IMAGE_URI

      # ------------------------
      # 🔹 APPLY כל שאר התשתית (ECS וכו')
      # ------------------------
      - name: Terraform Apply (All Infra)
        working-directory: terraform/main
        run: terraform apply -auto-approve

      # ------------------------
      # 🔹 בדיקות יוניט
      # ------------------------
      - name: Run Unit Tests
        working-directory: ./app
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
          PYTHONPATH=./app pytest app/tests
