name: Terraform CI/CD

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set AWS Region Defaults
        run: |
          echo "Checking AWS region..."
          if [ -z "${{ secrets.AWS_REGION }}" ]; then
            echo "AWS_DEFAULT_REGION=us-east-1" >> $GITHUB_ENV
            echo "✅ No region provided — using default: us-east-1"
          else
            echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
            echo "AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
            echo "✅ Using region from secrets: ${{ secrets.AWS_REGION }}"
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.6.6'

      - name: Terraform Destroy (Backend)
        working-directory: terraform/backend
        continue-on-error: true
        run: |
          terraform init
          terraform destroy -auto-approve

      - name: Terraform Init & Backend Setup
        working-directory: terraform/backend
        run: |
          terraform init
          terraform refresh
          terraform plan -out=tfplan || echo "❌ Plan failed, skipping problematic resources"
          terraform apply -auto-approve || echo "✅ Skipping problematic resources if already exist"

      - name: 🔧 Terraform Output (for environment)
        id: tf_outputs
        working-directory: terraform/backend
        run: |
          TF_BUCKET_NAME=$(terraform output -raw tf_state_bucket_name | tr -d '\r\n')
          DYNAMO_TABLE_NAME=$(terraform output -raw dynamo_table_name | tr -d '\r\n')

          echo "DEBUG - TF_BUCKET_NAME: ${TF_BUCKET_NAME}"
          echo "DEBUG - DYNAMO_TABLE_NAME: ${DYNAMO_TABLE_NAME}"

          if [ -n "$TF_BUCKET_NAME" ]; then
            echo "TF_BUCKET_NAME=$TF_BUCKET_NAME" >> $GITHUB_ENV
            echo "✅ Set TF_BUCKET_NAME"
          else
            echo "❌ TF_BUCKET_NAME is empty, skipping"
          fi

          if [ -n "$DYNAMO_TABLE_NAME" ]; then
            echo "DYNAMO_TABLE_NAME=$DYNAMO_TABLE_NAME" >> $GITHUB_ENV
            echo "✅ Set DYNAMO_TABLE_NAME"
          else
            echo "❌ DYNAMO_TABLE_NAME is empty, skipping"
          fi

      - name: 🔧 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🔄 Get ECR repo name from Terraform output
        id: get-ecr-repo
        working-directory: terraform/main
        run: |
            ECR_REPO_NAME=$(terraform output -raw ecr_repo_name | tr -d '\r\n')
            echo "ECR_REPO_NAME=${ECR_REPO_NAME}" >> $GITHUB_ENV
            echo "✅ Set ECR_REPO_NAME to: ${ECR_REPO_NAME}"

      - name: Terraform Init (Main)
        working-directory: terraform/main
        run: terraform init -reconfigure

      - name: 🐳 Build, tag and push Docker image
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:latest
          docker build -t $IMAGE_URI ./app
          docker push $IMAGE_URI

      - name: 🧪 Run Unit Tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pytest tests/

      - name: 💣 Terraform Destroy (Main)
        working-directory: terraform/main
        continue-on-error: true
        run: terraform destroy -auto-approve

      - name: Terraform Plan (Main)
        working-directory: terraform/main
        run: terraform plan

      - name: Terraform Apply (Main)
        working-directory: terraform/main
        run: terraform apply -auto-approve
