name: Terraform CI/CD

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set AWS Region Defaults
        run: |
          REGION="${{ secrets.AWS_REGION || 'us-east-1' }}"
          echo "AWS_REGION=$REGION" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.6.6'

      
      # ------------------------
      # 🔹 BACKEND APPLY
      # ------------------------
      - name: Terraform Init&Apply (Backend)
        working-directory: terraform/backend
        run: |
          terraform init
          terraform plan -out=tfplan
          terraform apply -auto-approve -input=false || {
            ERR=$?
            echo "Terraform apply failed with exit code $ERR"
            LOG=$(terraform apply -auto-approve -input=false 2>&1 || true)
            if echo "$LOG" | grep -q "already exists"; then
              echo "⚠️ Resource already exists. Continuing..."
            else
              echo "$LOG"
              echo "❌ Unhandled error in backend apply. Exiting."
              exit $ERR
            fi
          }

      - name: Extract Backend Outputs
        working-directory: terraform/backend
        run: |
          echo "🔍 Extracting Terraform outputs..."

          # חילוץ TF_BUCKET_NAME
          TF_BUCKET_NAME_RAW=$(terraform output -raw tf_state_bucket_name)
          TF_BUCKET_NAME=$(echo "$TF_BUCKET_NAME_RAW" | sed 's/\[command\].*output -raw tf_state_bucket_name//' | sed 's/::.*//' | tr -d '\r\n')

          # חילוץ DYNAMO_TABLE_NAME
          DYNAMO_TABLE_NAME_RAW=$(terraform output -raw dynamo_table_name)
          DYNAMO_TABLE_NAME=$(echo "$DYNAMO_TABLE_NAME_RAW" | sed 's/\[command\].*output -raw dynamo_table_name//' | sed 's/::.*//' | tr -d '\r\n')

          echo "✅ Outputs extracted:"
          echo "TF_BUCKET_NAME=$TF_BUCKET_NAME"
          echo "DYNAMO_TABLE_NAME=$DYNAMO_TABLE_NAME"

          if [ -z "$TF_BUCKET_NAME" ] || [ -z "$DYNAMO_TABLE_NAME" ]; then
            echo "❌ ERROR - One or more outputs are empty!"
            exit 1
          fi

          echo "TF_BUCKET_NAME=$TF_BUCKET_NAME" >> $GITHUB_ENV
          echo "DYNAMO_TABLE_NAME=$DYNAMO_TABLE_NAME" >> $GITHUB_ENV

      # ------------------------
      # 🔹 INIT MAIN BACKEND
      # ------------------------
      - name: Terraform Init (Main)
        working-directory: terraform/main
        run: |
          terraform init 
      
      # ------------------------
      # 🔹 APPLY ECR בלבד
      # ------------------------
      - name: Terraform Apply (ECR Only if not exists)
        working-directory: terraform/main
        run: |
          terraform apply -target=aws_ecr_repository.app_repo -auto-approve -input=false || {
            ERR=$?
            echo "Terraform apply failed with exit code $ERR"
            LOG=$(terraform apply -auto-approve -input=false 2>&1 || true)
            if echo "$LOG" | grep -q "already exists"; then
              echo "⚠️ Resource already exists. Continuing..."
            else
              echo "$LOG"
              echo "❌ Unhandled error in backend apply. Exiting."
              exit $ERR
            fi
          }

      - name: Ensure ECR repo exists or import into Terraform
        working-directory: terraform/main
        run: |
          if aws ecr describe-repositories --repository-names devops-app > /dev/null 2>&1; then
            echo "✅ ECR repo already exists. Importing..."
            terraform import aws_ecr_repository.app_repo devops-app || true
          else
            echo "🚀 ECR repo does not exist. Will be created by terraform apply."
          fi


      - name: Extract ECR Repo Name
        working-directory: terraform/main
        run: |
          ECR_REPO_NAME_RAW=$(terraform output -raw ecr_repo_name)
          ECR_REPO_NAME=$(echo "$ECR_REPO_NAME_RAW" | sed 's/\[command\].*output -raw ecr_repo_name//' | sed 's/::.*//' | tr -d '\r\n')
          echo ECR_REPO_NAME=$ECR_REPO_NAME
          if [ -n "$ECR_REPO_NAME" ]; then
            echo "ECR_REPO_NAME=$ECR_REPO_NAME" >> $GITHUB_ENV
          else
            echo "❌ ECR_REPO_NAME is empty!" && exit 1
          fi

   
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # ------------------------
      # 🔹 DOCKER BUILD + PUSH
      # ------------------------
      - name: Build and Push Docker Image
        run: |
          echo "🏗️ Building Docker Image: $IMAGE_URI"
          docker build -t $ECR_REPO_NAME ./app

          echo "🏷️ Tagging Docker Image as: $ECR_REPO_NAME

          echo "📤 Pushing Docker Image: $ECR_REPO_NAME
          docker push $ECR_REPO_NAME

       # ------------------------
      # 🔹 IMPORT EXISTING RESOURCES
      # ------------------------
      # - name: Auto-import existing AWS resources
      #  working-directory: terraform/main
      #  run: |
      #    chmod +x auto-import.sh
      #    ./auto-import.sh
          
      # ------------------------
      # 🔹 APPLY כל שאר התשתית (ECS וכו')
      # ------------------------
      - name: Import Existing AWS Resources to Terraform State & APPLY
        working-directory: terraform/main
        run: |
          RESOURCES=$(grep 'resource "aws_' main.tf | awk '{print $2, $3}' | sed 's/"//g')
      
          for resource in $RESOURCES; do
            case $resource in
              aws_vpc) 
                for id in $(aws ec2 describe-vpcs --query "Vpcs[*].VpcId" --output text); do 
                  terraform import aws_vpc.main $id || echo "⚠️ נכשל בייבוא VPC $id"; 
                done 
              ;;
              
              aws_subnet) 
                for id in $(aws ec2 describe-subnets --query "Subnets[*].SubnetId" --output text); do 
                  terraform import aws_subnet.public_a $id || terraform import aws_subnet.public_b $id || echo "⚠️ נכשל בייבוא Subnet $id"; 
                done 
              ;;
              
              aws_security_group) 
                for id in $(aws ec2 describe-security-groups --query "SecurityGroups[*].GroupId" --output text); do 
                  terraform import aws_security_group.alb_sg $id || echo "⚠️ נכשל בייבוא Security Group $id"; 
                done 
              ;;
              
              aws_lb) 
                for id in $(aws elbv2 describe-load-balancers --query "LoadBalancers[*].LoadBalancerArn" --output text); do 
                  terraform import aws_lb.devops_alb $id || echo "⚠️ נכשל בייבוא Load Balancer $id"; 
                done 
              ;;
              
              aws_lb_target_group) 
                for id in $(aws elbv2 describe-target-groups --query "TargetGroups[*].TargetGroupArn" --output text); do 
                  terraform import aws_lb_target_group.devops_target_group $id || echo "⚠️ נכשל בייבוא Target Group $id"; 
                done 
              ;;
              
              aws_lb_listener) 
                for id in $(aws elbv2 describe-listeners --query "Listeners[*].ListenerArn" --output text); do 
                  terraform import aws_lb_listener.devops_listener $id || echo "⚠️ נכשל בייבוא Listener $id"; 
                done 
              ;;
              
              aws_ecs_cluster) 
                for id in $(aws ecs list-clusters --query "clusterArns" --output text); do 
                  terraform import aws_ecs_cluster.devops_cluster $id || echo "⚠️ נכשל בייבוא ECS Cluster $id"; 
                done 
              ;;
              
              aws_ecs_service) 
                for id in $(aws ecs list-services --cluster devops-cluster --query "serviceArns" --output text); do 
                  terraform import aws_ecs_service.app $id || echo "⚠️ נכשל בייבוא ECS Service $id"; 
                done 
              ;;
              
              aws_ecr_repository) 
                for id in $(aws ecr describe-repositories --query "repositories[*].repositoryName" --output text); do 
                  terraform import aws_ecr_repository.app_repo $id || echo "⚠️ נכשל בייבוא ECR Repository $id"; 
                done 
              ;;
              
              aws_iam_role) 
                for id in $(aws iam list-roles --query "Roles[*].RoleName" --output text); do 
                  terraform import aws_iam_role.ecs_task_exec_role $id || echo "⚠️ נכשל בייבוא IAM Role $id"; 
                done 
              ;;
              
              aws_route_table) 
                for id in $(aws ec2 describe-route-tables --query "RouteTables[*].RouteTableId" --output text); do 
                  terraform import aws_route_table.public $id || echo "⚠️ נכשל בייבוא Route Table $id"; 
                done 
              ;;
              
              *) 
                echo "⚠️ אין אפשרות לייבוא אוטומטי עבור $resource בשלב זה" 
              ;;
            esac
          done
      
          echo "🚀 Running Terraform Apply"
          terraform apply -auto-approve -input=false




      # ------------------------
      # 🔹 בדיקות יוניט
      # ------------------------
      - name: Run Unit Tests
        working-directory: ./
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
          PYTHONPATH=./app pytest app/tests
